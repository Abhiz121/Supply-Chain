# -*- coding: utf-8 -*-
"""Sugarcane_SupplyChain.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M0U_xkKbMFRBUCJo9oEP0EU3T0sRUKoO
"""

import pandas as pd
from transformers import pipeline

file_path = "/content/Sugarcane_Supply_Chain_2021_2024.csv"

data = pd.read_csv(file_path)

sentiment_pipeline = pipeline("sentiment-analysis", model="distilbert-base-uncased")

def analyze_risk(weather_conditions):
    weather_lower = str(weather_conditions).lower()
    if "drought" in weather_lower or "low rainfall" in weather_lower:
        return "High risk: Drought or insufficient rainfall."
    elif "flood" in weather_lower or "waterlogging" in weather_lower:
        return "High risk: Flooding or excess water."
    elif "storm" in weather_lower or "cyclone" in weather_lower:
        return "Severe risk: Storms or cyclones disrupting supply."
    elif "heatwave" in weather_lower or "high temperature" in weather_lower:
        return "Moderate risk: Extreme heat affecting crop yield."
    elif "cold" in weather_lower or "frost" in weather_lower:
        return "Moderate risk: Frost or extreme cold damaging crops."
    elif "strike" in weather_lower or "labor unrest" in weather_lower:
        return "Operational risk: Labor strikes affecting production."
    elif "logistics" in weather_lower or "transport" in weather_lower:
        return "Supply chain risk: Transportation issues causing delays."
    else:
        return "Low risk: No significant threats detected."


def perform_analysis(data):
    results = []
    for _, row in data.iterrows():
        weather_conditions = row.get('Weather Conditions', '')
        if pd.isna(weather_conditions) or not str(weather_conditions).strip():
            sentiment = {"label": "neutral", "score": 0.5}
            risk = "No data available for risk analysis."
        else:
            sentiment = sentiment_pipeline(weather_conditions)[0]
            risk = analyze_risk(weather_conditions)

        results.append({
            "Date": row.get('Date', 'Unknown'),
            "Stage": row.get('Stage', 'Unknown'),
            "Location": row.get('Location', 'Unknown'),
            "Price (USD)": row.get('Price (USD)', 'Unknown'),
            "Export Volume (tons)": row.get('Export Volume (tons)', 'Unknown'),
            "Weather Conditions": weather_conditions,
            "Storage Capacity (tons)": row.get('Storage Capacity (tons)', 'Unknown'),
            "Storage Occupied (%)": row.get('Storage Occupied (%)', 'Unknown'),
            "Sentiment": sentiment['label'],
            "Sentiment Score": sentiment['score'],
            "Risk Analysis": risk
        })

    return pd.DataFrame(results)

def main():
    analyzed_data = perform_analysis(data)
    output_file = "analyzed_sugarcane_supply_chain.csv"
    analyzed_data.to_csv(output_file, index=False)
    print(f"Analysis complete. Results saved to {output_file}")
    print("\nSample Output:\n", analyzed_data.head())

if __name__ == "__main__":
    main()
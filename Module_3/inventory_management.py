# -*- coding: utf-8 -*-
"""Inventory_Management.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SV5jU-4R6dgJYZLUYeocSMV3E3EnkP5r
"""

import pandas as pd
import numpy as np
from statsmodels.tsa.holtwinters import ExponentialSmoothing

"""### File Path"""

file_path = "/content/Sugarcane_Supply_Chain_2021_2024.csv"
data = pd.read_csv(file_path)

"""### Fill missing values"""

data['Storage Capacity (tons)'] = data['Storage Capacity (tons)'].fillna(0)
data['Storage Occupied (%)'] = data['Storage Occupied (%)'].fillna(0)
data['Export Volume (tons)'] = data['Export Volume (tons)'].fillna(0)

"""### Calculate current inventory"""

data['Current Inventory (tons)'] = data['Storage Capacity (tons)'] * (data['Storage Occupied (%)'] / 100)
data['Date'] = pd.to_datetime(data['Date'])
data['Year-Month'] = data['Date'].dt.to_period('M')

"""### Summarize monthly inventory and exports"""

monthly_summary = data.groupby('Year-Month').agg({
    'Export Volume (tons)': 'sum',
    'Current Inventory (tons)': 'sum',
}).reset_index()

"""### Rename columns"""

monthly_summary.rename(columns={
    'Export Volume (tons)': 'Total Monthly Output (tons)',
    'Current Inventory (tons)': 'Total Monthly Inventory (tons)'
}, inplace=True)

"""###  **1. Customizable Alerts & Threshold Management**"""

high_threshold = float(input("Enter HIGH inventory threshold (%) (default 80): ") or 80)
low_threshold = float(input("Enter LOW inventory threshold (%) (default 20): ") or 20)
alerts = []
for index, row in data.iterrows():
    location = row['Location']
    occupied_percent = row['Storage Occupied (%)']
    capacity = row['Storage Capacity (tons)']

    if capacity > 0:
        if occupied_percent > high_threshold:
            alerts.append({
                "Date": row['Date'].strftime('%Y-%m-%d'),
                "Location": location,
                "Alert Type": "🚨 HIGH UTILIZATION",
                "Reason": f"{occupied_percent:.2f}% storage occupied."
            })
        elif occupied_percent < low_threshold:
            alerts.append({
                "Date": row['Date'].strftime('%Y-%m-%d'),
                "Location": location,
                "Alert Type": "⚠️ LOW UTILIZATION",
                "Reason": f"{occupied_percent:.2f}% storage occupied."
            })

alerts_df = pd.DataFrame(alerts)

"""###  **2. Predict Future Inventory Risks**"""

model = ExponentialSmoothing(monthly_summary['Total Monthly Inventory (tons)'], trend='add', seasonal=None)
fitted_model = model.fit()

"""### Predict next 3 months"""

future_months = pd.date_range(start=monthly_summary['Year-Month'].max().start_time, periods=4, freq='M')[1:]
predictions = fitted_model.forecast(steps=3)

"""### Create prediction DataFrame"""

future_inventory_df = pd.DataFrame({
    'Year-Month': future_months.to_period('M'),
    'Predicted Inventory (tons)': predictions
})

"""### Determine Future Risk Levels"""

future_inventory_df['Risk Level'] = np.where(
    future_inventory_df['Predicted Inventory (tons)'] < monthly_summary['Total Monthly Inventory (tons)'].mean() * 0.2,
    "⚠️ HIGH RISK - Shortage",
    np.where(future_inventory_df['Predicted Inventory (tons)'] > monthly_summary['Total Monthly Inventory (tons)'].mean() * 1.5,
             "⚠️ HIGH RISK - Overflow",
             "✅ Stable")
)

"""###  **3. Real-Time ERP Adjustments**"""

erp_actions = []
for _, row in future_inventory_df.iterrows():
    if "Shortage" in row['Risk Level']:
        action = "📦 Order New Stock"
    elif "Overflow" in row['Risk Level']:
        action = "🚛 Redistribute Stock"
    else:
        action = "✅ No Action Needed"

    erp_actions.append({
        'Year-Month': row['Year-Month'],
        'Risk Level': row['Risk Level'],
        'ERP Action': action
    })

erp_df = pd.DataFrame(erp_actions)

"""### Save reports"""

monthly_summary.to_csv("monthly_summary.csv", index=False)
alerts_df.to_csv("real_time_alerts.csv", index=False)
future_inventory_df.to_csv("inventory_forecast.csv", index=False)
erp_df.to_csv("erp_adjustments.csv", index=False)

"""### Print results"""

print("\n📊 == Monthly Input/Output Summary ==")
print(monthly_summary)

print("\n🔔 == Real-Time Alerts ==")
print(alerts_df)

print("\n🔮 == Future Risk Predictions ==")
print(future_inventory_df)

print("\n⚙️ == ERP Adjustments ==")
print(erp_df)

print("\n✅ All reports saved successfully!")